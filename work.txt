
# Defining study setting
covariateSettingsCm <- 
  FeatureExtraction::createCovariateSettings(
    useDemographicsGender = TRUE,
    useDemographicsAge = FALSE,
    useDemographicsAgeGroup = TRUE,
    useDemographicsRace = FALSE,
    useDemographicsEthnicity = FALSE,
    useDemographicsIndexYear = TRUE,
    useDemographicsIndexMonth = TRUE,
    useDemographicsPriorObservationTime = FALSE,
    useDemographicsPostObservationTime = FALSE,
    useDemographicsTimeInCohort = FALSE,
    useDemographicsIndexYearMonth = FALSE,
    useConditionOccurrenceAnyTimePrior = FALSE,
    useConditionOccurrenceLongTerm = TRUE,
    useConditionOccurrenceMediumTerm = FALSE,
    useConditionOccurrenceShortTerm = FALSE,
    useConditionOccurrenceInpatientAnyTimePrior = FALSE,
    useConditionOccurrenceInpatientLongTerm = FALSE,
    useConditionOccurrenceInpatientMediumTerm = FALSE,
    useConditionOccurrenceInpatientShortTerm = FALSE,
    useConditionEraAnyTimePrior = FALSE,
    useConditionEraLongTerm = FALSE,
    useConditionEraMediumTerm = FALSE,
    useConditionEraShortTerm = FALSE,
    useConditionEraOverlapping = FALSE,
    useConditionEraStartLongTerm = FALSE,
    useConditionEraStartMediumTerm = FALSE,
    useConditionEraStartShortTerm = FALSE,
    useConditionGroupEraAnyTimePrior = FALSE,
    useConditionGroupEraLongTerm = FALSE,
    useConditionGroupEraMediumTerm = FALSE,
    useConditionGroupEraShortTerm = FALSE,
    useConditionGroupEraOverlapping = FALSE,
    useConditionGroupEraStartLongTerm = FALSE,
    useConditionGroupEraStartMediumTerm = FALSE,
    useConditionGroupEraStartShortTerm = FALSE,
    useDrugExposureAnyTimePrior = FALSE,
    useDrugExposureLongTerm = TRUE,
    useDrugExposureMediumTerm = FALSE,
    useDrugExposureShortTerm = FALSE,
    useDrugEraAnyTimePrior = FALSE,
    useDrugEraLongTerm = FALSE,
    useDrugEraMediumTerm = FALSE,
    useDrugEraShortTerm = FALSE,
    useDrugEraOverlapping = FALSE,
    useDrugEraStartLongTerm = FALSE,
    useDrugEraStartMediumTerm = FALSE,
    useDrugEraStartShortTerm = FALSE,
    useDrugGroupEraAnyTimePrior = FALSE,
    useDrugGroupEraLongTerm = FALSE,
    useDrugGroupEraMediumTerm = FALSE,
    useDrugGroupEraShortTerm = FALSE,
    useDrugGroupEraOverlapping = FALSE,
    useDrugGroupEraStartLongTerm = FALSE,
    useDrugGroupEraStartMediumTerm = FALSE,
    useDrugGroupEraStartShortTerm = FALSE,
    useProcedureOccurrenceAnyTimePrior = FALSE,
    useProcedureOccurrenceLongTerm = TRUE,
    useProcedureOccurrenceMediumTerm = FALSE,
    useProcedureOccurrenceShortTerm = FALSE,
    useDeviceExposureAnyTimePrior = FALSE,
    useDeviceExposureLongTerm = FALSE,
    useDeviceExposureMediumTerm = FALSE,
    useDeviceExposureShortTerm = FALSE,
    useMeasurementAnyTimePrior = FALSE,
    useMeasurementLongTerm = TRUE,
    useMeasurementMediumTerm = FALSE,
    useMeasurementShortTerm = FALSE,
    useMeasurementValueAnyTimePrior = FALSE,
    useMeasurementValueLongTerm = FALSE,
    useMeasurementValueMediumTerm = FALSE,
    useMeasurementValueShortTerm = FALSE,
    useMeasurementRangeGroupAnyTimePrior = FALSE,
    useMeasurementRangeGroupLongTerm = FALSE,
    useMeasurementRangeGroupMediumTerm = FALSE,
    useMeasurementRangeGroupShortTerm = FALSE,
    useObservationAnyTimePrior = FALSE,
    useObservationLongTerm = FALSE,
    useObservationMediumTerm = FALSE,
    useObservationShortTerm = FALSE,
    useCharlsonIndex = TRUE,
    useDcsi = FALSE,
    useChads2 = FALSE,
    useChads2Vasc = FALSE,
    useDistinctConditionCountLongTerm = TRUE,
    useDistinctConditionCountMediumTerm = FALSE,
    useDistinctConditionCountShortTerm = FALSE,
    useDistinctIngredientCountLongTerm = TRUE,
    useDistinctIngredientCountMediumTerm = FALSE,
    useDistinctIngredientCountShortTerm = FALSE,
    useDistinctProcedureCountLongTerm = TRUE,
    useDistinctProcedureCountMediumTerm = FALSE,
    useDistinctProcedureCountShortTerm = FALSE,
    useDistinctMeasurementCountLongTerm = TRUE,
    useDistinctMeasurementCountMediumTerm = FALSE,
    useDistinctMeasurementCountShortTerm = FALSE,
    useVisitCountLongTerm = TRUE,
    useVisitCountMediumTerm = FALSE,
    useVisitCountShortTerm = FALSE,
    longTermStartDays = -365,
    mediumTermStartDays = -180,
    shortTermStartDays = -30,
    endDays = 0,
    addDescendantsToInclude = TRUE,
    addDescendantsToExclude = FALSE
  )


cmDataArgs <-  list(connectionDetails = connectionDetails, 
                    cdmDatabaseSchema = cdmDatabaseSchema,
                    oracleTempSchema = NULL, 
                    targetId = 5613, 
                    comparatorId = 5614, 
                    outcomeIds = 5622,
                    studyStartDate = "",
                    studyEndDate = "",
                    exposureDatabaseSchema = cdmDatabaseSchema,
                    exposureTable = "cohort",
                    outcomeDatabaseSchema =cdmDatabaseSchema,
                    outcomeTable = "cohort",
                    cdmVersion = 5,
                    excludeDrugsFromCovariates = TRUE,
                    firstExposureOnly = FALSE,
                    removeDuplicateSubjects = TRUE,
                    washoutPeriod = 0, 
                    covariateSettings = covariateSettingsCm)


#########################################
# CONSTRUCTION OF COHORTS
#########################################
treatmentCohortId <- 5613 # celecoxib
comparatorCohortId <- 5614  # naproxen
outcomeCohortId <- 5622  # 5622 -> CSGIE, 5620 -> MACE

cohortMethodData <- CohortMethod::getDbCohortMethodData(connectionDetails = connectionDetails, 
                                                        cdmDatabaseSchema = cdmDatabaseSchema,
                                                        oracleTempSchema = NULL,
                                                        targetId = treatmentCohortId, 
                                                        comparatorId = comparatorCohortId, 
                                                        outcomeIds = outcomeCohortId,
                                                        studyStartDate = '',
                                                        studyEndDate = '',
                                                        exposureDatabaseSchema = cdmDatabaseSchema,
                                                        exposureTable = 'cohort',
                                                        outcomeDatabaseSchema = cdmDatabaseSchema,
                                                        outcomeTable = 'cohort',
                                                        cdmVersion = '5',
                                                        excludeDrugsFromCovariates = TRUE,
                                                        firstExposureOnly = FALSE,
                                                        removeDuplicateSubjects = TRUE,
                                                        restrictToCommonPeriod = TRUE,
                                                        washoutPeriod = 0, 
                                                        covariateSettings = covariateSettingsCm)

mainFolder <- file.path('S:\\arekkas\\Risk Stratification\\Results\\celecoxib-naproxen-CSGIE-MACE-2', cdmName, 'Data', fsep = '\\')
subFolder <- 'cmData'
outputFolder <- file.path(mainFolder, subFolder, fsep = '\\')

dir.create(outputFolder, recursive = TRUE)
CohortMethod::saveCohortMethodData(cohortMethodData, file = outputFolder)

plpData <- cmToPlpData(cohortMethodData)
subFolder <- 'plpData'
outputFolder <- file.path(mainFolder, subFolder, fsep = '\\')
dir.create(outputFolder, recursive = TRUE)
PatientLevelPrediction::savePlpData(plpData, file = outputFolder)

#########################################
# LOAD COHORTS
#########################################
subFolder <- 'Data'
plpData <- PatientLevelPrediction::loadPlpData(file.path(mainFolder, subFolder, 'plpData', fsep = '\\'))
cohortMethodData <- CohortMethod::loadCohortMethodData(file.path(mainFolder, 'cmData', fsep = '\\'))


mainFolder <- file.path('S:\\arekkas\\Risk Stratification\\Results\\celecoxib-naproxen-CSGIE-MACE-2', cdmName, fsep = '\\')

populationPlp <-
  PatientLevelPrediction::createStudyPopulation(
    plpData = plpData,
    outcomeId = 5622, # CSGIE
    binary = TRUE,
    includeAllOutcomes = FALSE,
    firstExposureOnly = TRUE,
    washoutPeriod = 0,
    removeSubjectsWithPriorOutcome = FALSE, # ?
    priorOutcomeLookback = 0,
    requireTimeAtRisk = TRUE,
    minTimeAtRisk = 1,
    riskWindowStart = 0,
    addExposureDaysToStart = FALSE,
    riskWindowEnd = 0,
    addExposureDaysToEnd = TRUE
  )

saveRDS(populationPlp, file = file.path(mainFolder, 'populationPlp.rds', fsep = '\\'))


populationCm <- CohortMethod::createStudyPopulation(cohortMethodData = cohortMethodData,
                                                    outcomeId = 5622, # CSGIE
                                                    firstExposureOnly = TRUE, 
                                                    restrictToCommonPeriod = FALSE,
                                                    washoutPeriod = 0, 
                                                    removeDuplicateSubjects = TRUE,
                                                    removeSubjectsWithPriorOutcome = TRUE, 
                                                    priorOutcomeLookback = 0,
                                                    minDaysAtRisk = 1, 
                                                    riskWindowStart = 0, 
                                                    addExposureDaysToStart = FALSE,
                                                    riskWindowEnd = 0, 
                                                    addExposureDaysToEnd = TRUE)
saveRDS(populationCm, file.path(mainFolder, 'populationCm.rds', fsep = '\\'))

#########################################
# PREDICTION
#########################################
subFolder <- 'TrainedModel'
outputFolder <- file.path(mainFolder, subFolder, fsep = '\\')
dir.create(outputFolder, recursive = TRUE)

# Constructing prediction model to assign risk scores
modelSettings <-
  PatientLevelPrediction::setLassoLogisticRegression(variance = 0.01,
                                                     seed = NULL)

# Run the model ----
results <- PatientLevelPrediction::runPlp(
  population = populationPlp,
  plpData = plpData,
  modelSettings = modelSettings,
  testSplit = 'person',
  testFraction = .3,
  nfold = 10
)

PatientLevelPrediction::savePlpModel(results$model, dirPath = file.path(outputFolder, "model", fsep = '\\'))
PatientLevelPrediction::savePlpResult(results, dirPath = file.path(outputFolder, 'lr', fsep = '\\'))


# add plots and document to output folder
PatientLevelPrediction::plotPlp(
  results,
  file.path(outputFolder, 'plpmodels', results$analysisRef$analysisId, fsep = '\\')
)

#########################################
# RISK STRATIFICATION
#########################################

riskStrata <- 4
# creates new column with stratum numbers -> stores the stratum number and the subjectId to mapMatrix
mapMatrix <- dplyr::mutate(results$prediction, riskStratum = dplyr::ntile(results$prediction$value, riskStrata))[, c(2, 14)]
saveRDS(mapMatrix, file.path(mainFolder, subFolder, 'mapMatrix.rds', fsep = '\\'))


#########################################
# RISK STRATIFIED ANALYSIS
#########################################
cdmName <- 'MDCR_2'
mainFolder <- file.path('S:\\arekkas\\Risk Stratification\\Results\\celecoxib-naproxen-CSGIE-MACE-2', cdmName, fsep = '\\')
subFolder <- 'TrainedModel'

library(tictoc)
library(doParallel)
library(foreach)

cl <- makeCluster(4)
registerDoParallel(cl)

ps <- list()
tic()
ps <- foreach(i = 1:4) %dopar%{
  
  cohortMethodData <- CohortMethod::loadCohortMethodData(file.path(mainFolder, 'Data\\cmData', fsep = '\\'))
  mapMatrix <- readRDS(file.path(mainFolder, 'TrainedModel\\mapMatrix.rds', fsep = '\\'))
  populationCm <- readRDS(file.path(mainFolder, 'populationCm.rds', fsep = '\\'))
  populationRiskStratified <- populationCm[populationCm$subjectId %in% mapMatrix$subjectId[mapMatrix$riskStratum == i], ]
  CohortMethod::createPs(cohortMethodData = cohortMethodData, population = populationRiskStratified,
                         excludeCovariateIds = c(1118088302, 
                                                 19019273302,
                                                 19029025302))
  
}
toc()
stopCluster(cl)
saveRDS(ps, file.path(mainFolder, subFolder, 'psList.rds', fsep = '\\'))

#########################################
# Weighted K-M curves/combined K-M plot
#########################################
cdmName <- 'MDCD'
mainFolder <- file.path('S:\\arekkas\\Risk Stratification\\Results\\celecoxib-naproxen-CSGIE-MACE-2', cdmName, fsep = '\\')

subFolder <- file.path('TrainedModel', fsep = '\\')

psList <- readRDS(file.path(mainFolder, subFolder, 'psList.rds', fsep = '\\'))

subFolder <- file.path('TrainedModel', 'RiskStratifiedAnalysis', fsep = '\\')
directory <- file.path(mainFolder, subFolder,fsep = '\\')
dir.create(directory, recursive = TRUE)

plotsKM <- list()
for(i in 1:4){
  
  ps <- psList[[i]]
  
  plotsKM[[i]] <- weightedKM(ps,
                             useSW = F,
                             truncationQuantiles = c(.025, .975),
                             title = paste0('Risk Stratum ', i),
                             legend.position = c(.2, .14))$plot
  
  # pdf(file.path(directory, paste0('KMIPW_mine', i, '.pdf'), fsep = '\\'), onefile = FALSE)
  # print(plotsKM[[i]])
  # dev.off()
  
  print(i)
  
}


pdf(file.path(directory, 'combinedKM.pdf', fsep = '\\'), onefile = FALSE)
print(gridExtra::grid.arrange(plotsKM[[1]],
                              plotsKM[[2]],
                              plotsKM[[3]],
                              plotsKM[[4]],
                              nrow = 2))
dev.off()

pdf(file.path(directory, 'comparisonPlotHR.pdf', fsep = '\\'), onefile = FALSE)
print(comparisonPlotHr(psList)$plot)
dev.off()


mainFolder <- 'S:\\arekkas\\Risk Stratification\\Results\\celecoxib-naproxen-CSGIE-MACE-2\\maceResults'
subFolder <- list(trainedModel = 'trainedModel')
nStrata <- 4
timePoint <- 365
nModels <- length(subFolder)
dataARR <- data.frame(ARR = numeric(),
                      lower95 = numeric(),
                      upper95 = numeric(),
                      riskStratum = numeric())
dataHR <- data.frame(HR = numeric(),
                     lower95 = numeric(),
                     upper95 = numeric(),
                     riskStratum = numeric())
for(i in 1:nModels){
  
  directory <- file.path(mainFolder, subFolder[[i]], 'psList.rds', fsep = '\\')
  psList <- readRDS(directory)
  dataARR <- rbind(dataARR, absoluteRiskReductionDataFrame(psList = psList, 
                                                           timePoint = timePoint,
                                                           useSW = F,
                                                           truncatedWeights = TRUE,
                                                           truncationQuantiles = c(.01, .99)))
  dataHR <- rbind(dataHR, hazardRatioDataFrame(psList = psList,
                                               useSW = TRUE,
                                               truncatedWeights = TRUE,
                                               truncationQuantiles = c(.01, .99)))
  
}
dataARR$riskModel <- factor(rep(1:nModels, each = nStrata))
levels(dataARR$riskModel) <- names(subFolder)
dataHR$riskModel <- factor(rep(1:nModels, each = nStrata)) 
levels(dataHR$riskModel) <- names(subFolder)

grid::grid.newpage()
comparisonPlotGeneral(dataARR,
                      dataHR, 
                      ylimARR = c(-.1, .1),
                      ylimHR = c(0, 1.5),
                      legend.position = c(.05, .1))


pdf(file.path(mainFolder, 'comparisonPlotNew.pdf', fsep = '\\'), onefile = FALSE)
print(comparisonPlotGeneral(dataARR,
                            dataHR, 
                            ylimARR = c(-.1, .1),
                            ylimHR = c(0, 1.5),
                            legend.position = c(.08, .15)))
dev.off()

